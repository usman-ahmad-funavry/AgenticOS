<div>
  <div class="container py-5">
    <h1 class="mb-4 text-3xl font-bold">Twitter Bot Scheduler</h1>
    <!-- Config Section -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-800 mb-6">Configuration</h2>
      <form id="configForm">
        <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
          <div class="md:col-span-6">
            <div class="form-group">
              <label for="maxLength" class="block text-sm font-medium text-gray-700 mb-2">Max Length</label>
              <input type="number"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                id="maxLength" name="maxLength" value="<%= schedule?.config?.maxLength %>" required>
            </div>
          </div>
          <div class="md:col-span-6">
            <div class="form-group">
              <label for="timezone" class="block text-sm font-medium text-gray-700 mb-2">Timezone</label>
              <input type="text"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 cursor-not-allowed text-gray-500 outline-none"
                id="timezone" name="timezone" value="<%= schedule?.config?.timezone %>" required readonly>
            </div>
          </div>
          <div class="col-span-12">
            <div class="form-group">
              <label for="persona" class="block text-sm font-medium text-gray-700 mb-2">Persona</label>
              <textarea
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                id="persona" name="persona" rows="3" required><%= schedule?.config?.persona %></textarea>
            </div>
          </div>
          <div class="md:col-span-6">
            <div class="form-group">
              <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
              <input type="password"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                id="config_password" name="password" required>
            </div>
          </div>
        </div>

        <div class="mt-6">
          <button
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            type="submit">
            Save
          </button>
        </div>
      </form>
    </div>

    <!-- Schedule Table -->
    <div class="bg-white rounded-lg shadow-sm">
      <div class="p-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-6">Schedule</h2>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead>
              <tr class="bg-gray-50">
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Instruction
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% Object.entries(schedule?.schedule)?.forEach(([time, entry])=> { %>
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <%= time %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span
                      class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                      <%= entry?.type %>
                    </span>
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-h-24 overflow-y-auto">
                      <%= entry?.instruction %>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm">
                    <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="openEditModal('<%= time %>')">
                      <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="text-red-600 hover:text-red-900" onclick="deleteScheduleEntry('<%= time %>')">
                      <i class="fas fa-trash"></i> Delete
                    </button>
                  </td>
                </tr>
                <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Add New Entry Button -->
    <div class="mt-6">
      <button
        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        onclick="openNewEntryModal()">
        <i class="fas fa-plus mr-2"></i> Add New Schedule Entry
      </button>
    </div>
  </div>

  <!-- New Entry Modal -->
  <div id="newEntryModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border max-w-[37.5rem] shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Add New Schedule Entry</h3>
        <form id="newEntryForm" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Time</label>
            <input type="time" name="time" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
            <select name="type" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="">Select Type</option>
              <option value="poll">Poll</option>
              <option value="news">News</option>
              <option value="education">Education</option>
              <option value="market_recap">Market Recap</option>
              <option value="meme">Meme</option>
              <option value="market_insight">Market Insight</option>
              <option value="nft">NFT</option>
              <option value="security_tip">Security Tip</option>
              <option value="market_analysis">Market Analysis</option>
              <option value="trending_tokens">Trending Tokens</option>
              <option value="market_shift">Market Shift</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Instruction</label>
            <textarea name="instruction" rows="4" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input type="password" name="password" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          <div class="flex justify-end space-x-3 mt-5">
            <button type="button"
              class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md"
              onclick="closeNewEntryModal()">
              Cancel
            </button>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Add Entry
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Entry Modal -->
  <div id="editEntryModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border max-w-[37.5rem] shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Edit Schedule Entry</h3>
        <form id="editEntryForm" class="space-y-4">
          <input type="hidden" name="originalTime" id="editOriginalTime">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Time</label>
            <input type="time" name="time" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
            <select name="type" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="">Select Type</option>
              <option value="poll">Poll</option>
              <option value="news">News</option>
              <option value="education">Education</option>
              <option value="market_recap">Market Recap</option>
              <option value="meme">Meme</option>
              <option value="market_insight">Market Insight</option>
              <option value="nft">NFT</option>
              <option value="security_tip">Security Tip</option>
              <option value="market_analysis">Market Analysis</option>
              <option value="trending_tokens">Trending Tokens</option>
              <option value="market_shift">Market Shift</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Instruction</label>
            <textarea name="instruction" rows="4" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input type="password" name="password" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          <div class="flex justify-end space-x-3 mt-5">
            <button type="button"
              class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md"
              onclick="closeEditModal()">
              Cancel
            </button>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Update Entry
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-1/2 -translate-y-1/2 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="text-center">
          <h3 class="text-lg font-medium leading-6 text-gray-900 mb-2">Confirm Deletion</h3>
          <div class="text-sm text-gray-500 mb-4">
            Please enter your password to confirm deletion.
          </div>
        </div>
        <form id="deleteForm" class="space-y-4">
          <input type="hidden" id="deleteEntryTime" name="time">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input type="password" name="password" required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter password">
          </div>
          <div class="flex justify-end space-x-3 mt-5">
            <button type="button"
              class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md"
              onclick="closeDeleteModal()">
              Cancel
            </button>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
              Delete Entry
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Delete Modal Functions
    function openDeleteModal(time) {
      document.getElementById('deleteEntryTime').value = time;
      document.getElementById('deleteModal').classList.remove('hidden');
    }

    function closeDeleteModal() {
      document.getElementById('deleteModal').classList.add('hidden');
      document.getElementById('deleteForm').reset();
    }

    // Handle Delete Form Submission
    document.getElementById('deleteForm').addEventListener('submit', async function (e) {
      e.preventDefault();

      const formData = new FormData(e.target);
      const time = formData.get('time');
      const password = formData.get('password');


      try {
        const response = await fetch(`/api/schedule/time`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${password}`
          },
          body: JSON.stringify({ time }),
        });

        if (response.ok) {
          // Refresh the page to show the new entry
          window.location.reload();
        } else if (response.status === 401) {
          alert('Invalid password');
        } else {
          throw new Error('Failed to delete entry');
        }
      } catch (error) {
        console.error('Error deleting entry:', error);
        alert('An error occurred while trying to delete the entry.');
      }
    });

    // Update the delete button click handler
    function deleteScheduleEntry(time) {
      openDeleteModal(time);
    }

    // New Entry Modal Functions
    function openNewEntryModal() {
      document.getElementById('newEntryModal').classList.remove('hidden');
    }

    function closeNewEntryModal() {
      document.getElementById('newEntryModal').classList.add('hidden');
      document.getElementById('newEntryForm').reset();
    }

    // Edit Entry Modal Functions
    function openEditModal(time) {
      const scheduleData = JSON.parse(`<%- JSON.stringify(schedule.schedule) %>`);
      const entry = scheduleData[time];

      const form = document.getElementById('editEntryForm');
      form.querySelector('input[name="time"]').value = time;
      form.querySelector('select[name="type"]').value = entry?.type;
      form.querySelector('textarea[name="instruction"]').value = entry?.instruction;
      form.querySelector('#editOriginalTime').value = time;

      document.getElementById('editEntryModal').classList.remove('hidden');
      document.getElementById('editOriginalTime').value = time;
    }

    function closeEditModal() {
      document.getElementById('editEntryModal').classList.add('hidden');
      document.getElementById('editEntryForm').reset();
    }

    // Handle Update Config form submission
    document.getElementById('configForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const config = {
        maxLength: +formData.get('maxLength'),
        timezone: formData.get('timezone'),
        persona: formData.get('persona'),
      }

      try {
        const response = await fetch('/api/schedule/config', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${formData.get('password')}`
          },
          body: JSON.stringify({ config }),
        });

        if (response.ok) {
          window.location.reload();
        } else if (response.status === 401) {
          alert('Invalid password');
        } else {
          throw new Error('Failed to update config');
        }
      } catch (error) {
        console.error('Error updating config:', error);
        alert('Failed to update config. Please try again.');
      }
    });

    // Handle new entry form submission
    document.getElementById('newEntryForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const newEntry = {
        time: formData.get('time'),
        record: {
          type: formData.get('type'),
          instruction: formData.get('instruction')
        }
      };

      try {
        // TODO: Replace with your API endpoint
        const response = await fetch('/api/schedule/time', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${formData.get('password')}`
          },
          body: JSON.stringify(newEntry)
        });

        if (response.ok) {
          // Refresh the page to show the new entry
          window.location.reload();
        } else if (response.status === 401) {
          alert('Invalid password');
        } else {
          throw new Error('Failed to add new entry');
        }
      } catch (error) {
        console.error('Error adding new entry:', error);
        alert('Failed to add new entry. Please try again.');
      }
    });

    // Handle update entry form submission
    document.getElementById('editEntryForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const newEntry = {
        oldTime: formData.get('originalTime'),
        time: formData.get('time'),
        record: {
          type: formData.get('type'),
          instruction: formData.get('instruction')
        }
      };

      try {
        // TODO: Replace with your API endpoint
        const response = await fetch('/api/schedule/time', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${formData.get('password')}`
          },
          body: JSON.stringify(newEntry)
        });

        if (response.ok) {
          // Refresh the page to show the new entry
          window.location.reload();
        } else if (response.status === 401) {
          alert('Invalid password');
        } else {
          throw new Error('Failed to update entry');
        }
      } catch (error) {
        console.error('Error updating entry:', error);
        alert('Failed to update entry. Please try again.');
      }
    });
  </script>
</div>