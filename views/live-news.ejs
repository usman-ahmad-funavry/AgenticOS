<!-- Webhook Registration Section -->
<div class="container mx-auto px-4 py-8">
  <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold text-gray-800">Webhook Registration</h2>
      <div class="flex space-x-4">
        <button id="registerWebhook"
          class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition duration-200 flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed">
          <span class="button-text">Register Webhook</span>
          <span class="loading-spinner hidden">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
              viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
              </path>
            </svg>
          </span>
        </button>
      </div>
    </div>

    <div class="space-y-4">
      <div class="bg-gray-50 rounded-lg p-4">
        <p class="text-gray-700 mb-2">Register your webhook to automatically receive and post updates. Your webhook URL
          should be accessible from the internet.</p>
        <div class="flex items-center space-x-2">
          <input type="text" id="webhookUrl"
            class="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
            placeholder="https://your-domain.com/api/webhook/" value="<%=  currentWebhookUrl || '' %>">
          <button id="copyUrl" class="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-lg transition duration-200"
            title="Copy webhook URL">
            <i class="fas fa-copy"></i>
          </button>
        </div>
      </div>

      <div class="bg-blue-50 rounded-lg p-4">
        <h3 class="text-lg font-semibold text-blue-800 mb-2">Webhook Information</h3>
        <div class="space-y-2 text-sm text-blue-700">
          <p>• Your webhook will receive POST requests with updates</p>
          <p>• Ensure your endpoint can handle incoming POST requests</p>
          <p>• The webhook should return a 200 status code for successful receipt</p>
          <p>• Updates will be sent in real-time as new content is available</p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Category Management Section -->
<div class="container mx-auto px-4 py-8">
  <div class="bg-white rounded-lg shadow-lg p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold text-gray-800">Live News Categories</h1>
      <div class="flex space-x-4">
        <button id="saveCategories"
          class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition duration-200 flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed">
          <span class="button-text">Save Changes</span>
          <span class="loading-spinner hidden">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
              viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
              </path>
            </svg>
          </span>
        </button>
      </div>
    </div>

    <!-- Search Bar -->
    <div class="mb-6">
      <div class="relative">
        <input type="text" id="categorySearch"
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Search categories...">
        <span class="absolute right-3 top-2.5 text-gray-400">
          <i class="fas fa-search"></i>
        </span>
      </div>
    </div>

    <!-- Categories Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="categoriesContainer">
      <% data?.forEach(function(category) { %>
        <div class="category-item border rounded-lg p-4 hover:shadow-md transition duration-200"
          data-category="<%= category?.name?.toLowerCase() %>">
          <label class="flex items-start space-x-3 cursor-pointer">
            <input type="checkbox"
              class="form-checkbox h-5 w-5 text-blue-500 rounded border-gray-300 focus:ring-blue-500"
              value="<%= category?.id %>" <%=category?.isSubscribed ? 'checked' : '' %>>
            <div class="flex flex-col">
              <span class="font-medium text-gray-800">
                <%= category?.name %>
              </span>
              <span class="text-sm text-gray-500">
                <%= category?.description || 'No description available' %>
              </span>
            </div>
          </label>
        </div>
        <% }); %>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden">
  <span id="toastMessage"></span>
</div>

<!-- Save Changes Confirmation Modal -->
<div id="saveChangesModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
  <div class="relative top-1/2 -translate-y-1/2 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="text-center">
        <h3 class="text-lg font-medium leading-6 text-gray-900 mb-2">Confirm Save Changes</h3>
        <div class="text-sm text-gray-500 mb-4">
          Please enter your password to confirm saving changes.
        </div>
      </div>
      <form id="saveChangesForm" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
          <input type="password" name="password" required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter password">
        </div>
        <div class="flex justify-end space-x-3 mt-5">
          <button type="button"
            class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md"
            onclick="closeSaveChangesModal()">
            Cancel
          </button>
          <button type="submit"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Register Webhook Confirmation Modal -->
<div id="registerWebhookModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
  <div class="relative top-1/2 -translate-y-1/2 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="text-center">
        <h3 class="text-lg font-medium leading-6 text-gray-900 mb-2">Confirm Webhook Registration</h3>
        <div class="text-sm text-gray-500 mb-4">
          Please enter your password to confirm webhook registration.
        </div>
      </div>
      <form id="registerWebhookForm" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
          <input type="password" name="password" required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter password">
        </div>
        <div class="flex justify-end space-x-3 mt-5">
          <button type="button"
            class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md"
            onclick="closeRegisterWebhookModal()">
            Cancel
          </button>
          <button type="submit"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Register Webhook
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Modal Functions - Moving to global scope
  function openSaveChangesModal() {
    document.getElementById('saveChangesModal').classList.remove('hidden');
  }

  function closeSaveChangesModal() {
    document.getElementById('saveChangesModal').classList.add('hidden');
    document.getElementById('saveChangesForm').reset();
  }

  function openRegisterWebhookModal() {
    document.getElementById('registerWebhookModal').classList.remove('hidden');
  }

  function closeRegisterWebhookModal() {
    document.getElementById('registerWebhookModal').classList.add('hidden');
    document.getElementById('registerWebhookForm').reset();
  }

  document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('categorySearch');
    const categoriesContainer = document.getElementById('categoriesContainer');
    const saveButton = document.getElementById('saveCategories');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const buttonText = saveButton.querySelector('.button-text');
    const loadingSpinner = saveButton.querySelector('.loading-spinner');

    // New webhook registration elements
    const registerWebhookBtn = document.getElementById('registerWebhook');
    const webhookUrlInput = document.getElementById('webhookUrl');
    const copyUrlBtn = document.getElementById('copyUrl');
    const registerButtonText = registerWebhookBtn.querySelector('.button-text');
    const registerLoadingSpinner = registerWebhookBtn.querySelector('.loading-spinner');

    // Function to set loading state
    function setLoading(button, buttonTextElement, spinnerElement, isLoading, loadingText = 'Saving...', defaultText = 'Save Changes') {
      button.disabled = isLoading;
      if (isLoading) {
        buttonTextElement.textContent = loadingText;
        spinnerElement.classList.remove('hidden');
      } else {
        buttonTextElement.textContent = defaultText;
        spinnerElement.classList.add('hidden');
      }
    }

    // Search functionality
    searchInput.addEventListener('input', function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const categoryItems = document.querySelectorAll('.category-item');

      categoryItems.forEach(item => {
        const categoryName = item.dataset.category;
        if (categoryName.includes(searchTerm)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });

    // Copy webhook URL
    copyUrlBtn.addEventListener('click', async function () {
      try {
        await navigator.clipboard.writeText(webhookUrlInput.value);
        showToast('Webhook URL copied to clipboard!', 'success');
      } catch (err) {
        showToast('Failed to copy URL', 'error');
      }
    });

    // Save Categories
    saveButton.addEventListener('click', function (e) {
      e.preventDefault();
      openSaveChangesModal();
    });

    document.getElementById('saveChangesForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const password = e.target.password.value;
      const selectedCategories = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
        .map(checkbox => parseInt(checkbox.value, 10));

      try {
        setLoading(saveButton, buttonText, loadingSpinner, true);
        const response = await fetch('/api/webhook/categories/subscribe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${password}`
          },
          body: JSON.stringify({ categoryIds: selectedCategories })
        });

        const result = await response.json();

        if (response.ok && result.success) {
          showToast('Categories updated successfully!', 'success');
          window.location.reload();
        } else {
          showToast(result.message || 'Failed to update categories.', 'error');
          setLoading(saveButton, buttonText, loadingSpinner, false);
        }
      } catch (error) {
        showToast('An error occurred while saving.', 'error');
        console.error('Error:', error);
        setLoading(saveButton, buttonText, loadingSpinner, false);
      } finally {
        closeSaveChangesModal();
      }
    });

    // Register webhook
    registerWebhookBtn.addEventListener('click', function (e) {
      e.preventDefault();
      openRegisterWebhookModal();
    });

    document.getElementById('registerWebhookForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const password = e.target.password.value;
      const url = webhookUrlInput.value.trim();

      if (!url) {
        showToast('Please enter a webhook URL', 'error');
        return;
      }

      try {
        setLoading(registerWebhookBtn, registerButtonText, registerLoadingSpinner, true, 'Registering...', 'Register Webhook');

        const response = await fetch('/api/webhook/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${password}`
          },
          body: JSON.stringify({ url })
        });

        const result = await response.json();

        if (response.ok && result.success) {
          showToast('Webhook registered successfully!', 'success');
        } else {
          showToast(result.message || 'Failed to register webhook.', 'error');
        }
      } catch (error) {
        showToast('An error occurred while registering webhook.', 'error');
        console.error('Error:', error);
      } finally {
        setLoading(registerWebhookBtn, registerButtonText, registerLoadingSpinner, false, 'Registering...', 'Register Webhook');
        closeRegisterWebhookModal();
      }
    });

    // Toast notification function
    function showToast(message, type = 'success') {
      toastMessage.textContent = message;
      toast.classList.remove('hidden');
      toast.classList.remove('bg-red-500', 'bg-green-500');
      toast.classList.add(type === 'success' ? 'bg-green-500' : 'bg-red-500');

      setTimeout(() => {
        toast.classList.add('hidden');
      }, 3000);
    }
  });
</script>

<style>
  .form-checkbox {
    cursor: pointer;
  }

  .form-checkbox:checked {
    background-color: #3B82F6;
    border-color: #3B82F6;
  }

  .category-item:hover {
    transform: translateY(-1px);
  }

  #toast {
    transition: all 0.3s ease;
    z-index: 50;
  }

  @media (max-width: 768px) {
    .grid {
      grid-template-columns: repeat(1, 1fr);
    }
  }
</style>